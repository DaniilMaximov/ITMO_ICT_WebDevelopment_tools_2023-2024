{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u044b\u0435 \u0440\u0430\u0431\u043e\u0442\u044b 6 \u0441\u0435\u043c\u0435\u0441\u0442\u0440","text":"<p>\u0417\u0434\u0435\u0441\u044c \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u044b \u043c\u043e\u0438 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u044b\u0435 \u0440\u0430\u0431\u043e\u0442\u044b.</p>"},{"location":"lab-1/","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0438 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0438","text":"<p>\u0412\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u043d\u044b\u0435 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0438:</p> <ul> <li>\u041f\u0440\u0430\u043a\u0442\u0438\u043a\u0430 1</li> <li>\u041f\u0440\u0430\u043a\u0442\u0438\u043a\u0430 2</li> <li>\u041f\u0440\u0430\u043a\u0442\u0438\u043a\u0430 3</li> </ul> <p>\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f:</p> <p>\u0422\u0435\u043a\u0441\u0442 \u0440\u0430\u0431\u043e\u0442\u044b</p> \u0417\u0430\u0434\u0430\u043d\u0438\u0435 <p>\u0420\u0430\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b-\u0442\u0430\u0439\u043c-\u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440\u0430.</p> <p>\u0420\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0430\u0439\u0442\u0435 \u043f\u0440\u043e\u0441\u0442\u0443\u044e \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443-\u0442\u0430\u0439\u043c-\u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043c\u043e\u0436\u0435\u0442 \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u0432\u0430\u0448\u0438\u043c \u0432\u0440\u0435\u043c\u0435\u043d\u0435\u043c \u0438 \u0437\u0430\u0434\u0430\u0447\u0430\u043c\u0438.  \u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0442\u044c \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u0437\u0430\u0434\u0430\u0447\u0438 \u0441 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435\u043c, \u0443\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0442\u044c \u0438\u043c \u0441\u0440\u043e\u043a\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0438 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u044b,  \u0430 \u0442\u0430\u043a\u0436\u0435 \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u0442\u044c \u0437\u0430\u0442\u0440\u0430\u0447\u0435\u043d\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f \u043d\u0430 \u043a\u0430\u0436\u0434\u0443\u044e \u0437\u0430\u0434\u0430\u0447\u0443.</p> <p>\u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u043c\u043e\u0433\u0443\u0442 \u0432\u043a\u043b\u044e\u0447\u0430\u0442\u044c \u0432 \u0441\u0435\u0431\u044f \u0443\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u044f \u043e \u043f\u0440\u0438\u0431\u043b\u0438\u0436\u0435\u043d\u0438\u0438 \u043a \u0434\u0435\u0434\u043b\u0430\u0439\u043d\u0430\u043c,  \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0435\u0436\u0435\u0434\u043d\u0435\u0432\u043d\u043e\u0433\u043e \u0440\u0430\u0441\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0438 \u0430\u043d\u0430\u043b\u0438\u0437 \u0432\u0440\u0435\u043c\u0435\u043d\u0438, \u0437\u0430\u0442\u0440\u0430\u0447\u0435\u043d\u043d\u043e\u0433\u043e \u043d\u0430 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438.</p>"},{"location":"lab-1/auth/","title":"Auth","text":"auth.py auth.py<pre><code>import datetime\n\nfrom fastapi import HTTPException, Security, Depends\nfrom fastapi.security import HTTPBearer, HTTPAuthorizationCredentials, OAuth2PasswordBearer\nimport jwt\nfrom passlib.context import CryptContext\n\nfrom dotenv import load_dotenv\n\nfrom exceptions.not_auth_exception import NotAuthException\n\nload_dotenv()\n\nfrom connection import *\nfrom models.user_models import *\n\nclass AuthHandler:\n    security = HTTPBearer()\n\n    pwd_context = CryptContext(schemes=['bcrypt'])\n    load_dotenv()\n    secret = os.getenv(\"SECRET\")\n\n    # \u0445\u044d\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u0430\u0440\u043e\u043b\u044f\n    def get_hash(self, password):\n        return self.pwd_context.hash(password)\n\n\n    # \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f \u043f\u0430\u0440\u043e\u043b\u044f\n    def verify(self, pwd, hashed_pwd):\n        return self.pwd_context.verify(pwd, hashed_pwd, scheme='bcrypt')\n\n    # \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u0442\u043e\u043a\u0435\u043d\u0430\n    def encode_token(self, user_id):\n        payload = {\n            'exp': datetime.datetime.utcnow() + datetime.timedelta(hours=1),\n            'iat': datetime.datetime.utcnow(),\n            'sub': user_id\n        }\n        print(\"payload\", payload)\n\n        testjwt = (jwt.encode(payload, self.secret, algorithm='HS256'))\n        print(\"decoded\", self.decode_token(testjwt))\n\n        return jwt.encode(payload, self.secret, algorithm='HS256')\n\n    # \u0434\u0435\u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0442\u043e\u043a\u0435\u043d\u0430\n    def decode_token(self, token):\n        try:\n            payload = jwt.decode(token, self.secret, algorithms=['HS256'])\n            return payload['sub']\n        except jwt.ExpiredSignatureError:\n            raise HTTPException(status_code=401, detail=\"Signature expired\")\n        except jwt.InvalidTokenError:\n            raise HTTPException(status_code=401, detail=f\"Invalid token\")\n\n    # \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432 \u0441\u0435\u0441\u0441\u0438\u0438\n    def current_user(self, auth: HTTPAuthorizationCredentials = Security(security),\n                     session=Depends(get_session)) -&gt; User:\n        print(\"auth\", auth.credentials)\n        id = self.decode_token(auth.credentials)\n        if not id:\n            raise NotAuthException\n        db_user = session.get(User, id)\n        if not db_user:\n            raise NotAuthException\n        return db_user\n</code></pre>"},{"location":"lab-1/db/","title":"Db","text":""},{"location":"lab-1/db/#_1","title":"\u0421\u0445\u0435\u043c\u0430 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445","text":""},{"location":"lab-1/db/#_2","title":"\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u0431\u0434","text":"db connaction connection.py<pre><code>import os\n\nfrom dotenv import load_dotenv\n\nfrom sqlmodel import SQLModel, Session, create_engine, text\n\nload_dotenv()\ndb_url = os.getenv(\"DB_LINK\")\nengine = create_engine(db_url)\n\n\ndef init_db():\n    SQLModel.metadata.drop_all(engine)\n    SQLModel.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n</code></pre>"},{"location":"lab-1/endpoints/","title":"Endpoints","text":"location_model.pytransport_endpoints.pytrip_endpoints.pyuser_endpoints.pyuser_trip_link_endpoints.py location_endpoints.py<pre><code>from typing import Sequence, Type\n\nfrom fastapi import APIRouter, Depends\nfrom sqlmodel import Session, select\n\nfrom auth import AuthHandler\nfrom connection import get_session\nfrom models.location_models import Location, LocationDefault\n\nlocation_router = APIRouter(tags=['Location'])\nauth_handler = AuthHandler()\n\n\n@location_router.get(\"/location/all\")\ndef trip_list(session: Session = Depends(get_session)) -&gt; Sequence[Location]:\n    return session.exec(select(Location)).all()\n\n\n@location_router.post(\"/location/create\")\ndef create_location(location: LocationDefault, session: Session = Depends(get_session)) -&gt; Location:\n\n    location = Location.model_validate(location)\n    session.add(location)\n    session.commit()\n    session.refresh(location)\n    return location\n\n\n@location_router.delete(\"/location/delete\")\ndef delete_location(location_id: int, session: Session = Depends(get_session\n                                                                 )) -&gt; Type[Location] | None:\n    location = session.get(Location, location_id)\n    session.delete(location)\n    session.commit()\n    return location\n</code></pre> transport_endpoints.py<pre><code>from typing import Sequence, Type\n\nfrom fastapi import APIRouter, Depends\nfrom sqlmodel import Session, select\n\nfrom auth import AuthHandler\nfrom connection import get_session\nfrom models.transport_models import Transport, TransportDefault\n\ntransport_router = APIRouter(tags=['Transport'])\nauth_handler = AuthHandler()\n\n\n@transport_router.get(\"/transport/all\")\ndef get_all_transports(session: Session = Depends(get_session)) -&gt; Sequence[Transport]:\n    transports = session.exec(select(Transport)).all()\n    return transports\n\n\n@transport_router.post(\"/transport/create\")\ndef create_transport(transport: TransportDefault, session: Session = Depends(get_session)) -&gt; Transport:\n    transport = Transport.model_validate(transport)\n    session.add(transport)\n    session.commit()\n    session.refresh(transport)\n    return transport\n\n@transport_router.delete(\"/transport/delete\")\ndef delete_transport(transport: TransportDefault, session: Session = Depends(get_session)):\n    transport = Transport.model_validate(transport)\n    session.delete(transport)\n    session.commit()\n    return transport\n</code></pre> trip_endpoints.py<pre><code>from typing import Sequence, List\n\nfrom fastapi import APIRouter, Depends, HTTPException\nfrom sqlmodel import select, Session\nfrom typing_extensions import TypedDict\n\nfrom auth import AuthHandler\nfrom connection import get_session\nfrom exceptions.forbbiden_exception import ForbiddenException\nfrom exceptions.user_not_found_exception import UserNotFoundException\nfrom models.trip_models import Trip, TripDefault, TripInput, TripPublic\nfrom models.user_models import User\nfrom models.user_trip_link_models import UserTripLink, UserTripLinkDefault, UserTripLinkTrips\n\ntrip_router = APIRouter(tags=['Trips'])\nauth_handler = AuthHandler()\n\n\ndef user_in_members(trip_id: int, user_id: int) -&gt; bool:\n    generator = get_session()\n    session = next(generator)\n    user = session.get(User, user_id)\n    if not user:\n        raise UserNotFoundException\n    trip = session.get(Trip, trip_id)\n    if not trip:\n        raise HTTPException(status_code=404, detail=\"Trip not found\")\n    return user.id in [mem.user.id for mem in trip.members]\n\n\n@trip_router.get(\"/trip/all\", response_model=List[TripPublic])\ndef trip_list(session: Session = Depends(get_session)) -&gt; Sequence[Trip]:\n    return session.exec(select(Trip)).all()\n\n\n@trip_router.get(\"/trip/my\")\ndef trip_my(session=Depends(get_session),\n            current=Depends(auth_handler.current_user)) -&gt; List[UserTripLinkTrips]:\n    user = session.get(User, current.id)\n\n    if not user:\n        raise UserNotFoundException\n    roles = [link.role for link in user.trips]\n    trips = [TripPublic.model_validate(link.trip) for link in user.trips]\n    users_trips = [UserTripLinkTrips(role=r, trip=t) for r, t in zip(roles, trips)]\n    if not user:\n        raise HTTPException(status_code=404, detail=\"User has no trips\")\n    return users_trips\n\n@trip_router.get(\"/trip/{trip_id}\")\ndef trip_one(trip_id: int, session=Depends(get_session)) -&gt; Trip:\n    trip = session.get(Trip, trip_id)\n    if not trip:\n        raise HTTPException(status_code=404, detail=\"Trip not found\")\n    return trip\n\n\n@trip_router.post(\"/trip/create\")\ndef trip_create(trip: TripInput, session=Depends(get_session),\n                current=Depends(auth_handler.current_user)) -&gt; TypedDict('Response', {\"status\": int,\n                                                                                      \"data\": Trip}):\n    trip = Trip.model_validate(trip)\n\n    session.add(trip)\n    session.commit()\n\n    session.refresh(trip)\n\n    link = UserTripLinkDefault(user_id=current.id, trip_id=trip.id, role='creator')\n    link = UserTripLink.model_validate(link)\n\n    session.add(link)\n    session.commit()\n    session.refresh(link)\n    session.refresh(trip)\n    return {\"status\": 200, \"data\": trip}\n\n\n@trip_router.delete(\"/trip/delete/{trip_id}\")\ndef trip_delete(trip_id: int, session=Depends(get_session),\n                current=Depends(auth_handler.current_user)):\n    if not (current.is_admin or user_in_members(trip_id, current.id)):\n        raise ForbiddenException\n    trip = session.get(Trip, trip_id)\n    session.delete(trip)\n    session.commit()\n    return {\"status\": 201, \"message\": f\"deleted trip with id {trip_id}\"}\n</code></pre> user_endpoints.py<pre><code>from typing import Sequence\n\nfrom fastapi import APIRouter, Depends, HTTPException\nfrom sqlmodel import Session, select\nfrom typing_extensions import List, TypedDict\n\nfrom auth import AuthHandler\nfrom connection import get_session\nfrom exceptions.forbbiden_exception import ForbiddenException\nfrom exceptions.invalid_password_exception import InvalidPasswordException\nfrom exceptions.user_not_found_exception import UserNotFoundException\nfrom exceptions.username_already_registered_exception import UsernameAlreadyRegisteredException\nfrom models.user_models import *\nfrom models.user_models import User\n\n\nuser_router = APIRouter(tags=[\"User\"])\nauth_handler = AuthHandler()\n\n\n@user_router.get(\"/user/all\", response_model=List[User])\ndef user_list(session: Session = Depends(get_session)) -&gt; Sequence[User]:\n    users = session.exec(select(User)).all()\n    return users\n\n\n@user_router.get(\"/user/me\")\ndef user_me(current=Depends(auth_handler.current_user)) -&gt; UserDefault:\n    # user = session.get(User, current.id)\n    user = current\n    if not user:\n        raise UserNotFoundException\n    user_model = user.model_dump(exclude={'password'})\n    return UserDefault.model_validate(user_model)\n\n\n@user_router.get(\"/user/{user_id}\")\ndef user(user_id: str, session: Session = Depends(get_session)) -&gt; UserDefault:\n    user = session.exec(select(User).filter(User.id == user_id)).first()\n    return user\n\n\n@user_router.post(\"/user/create\")\ndef create(user_data: UserInput, session: Session = Depends(get_session)) -&gt; TypedDict('Response', {\"status\": int,\n                                                                                                    \"data\": User}):\n    db_user = session.exec(select(User).filter(User.username == user_data.username)).first()\n\n    if db_user:\n        raise UsernameAlreadyRegisteredException()\n\n    user_data = user_data.model_dump(exclude={'password2'}, exclude_unset=True)\n    hashed_pwd = auth_handler.get_hash(user_data.get('password'))\n    user_data['password'] = hashed_pwd\n\n    user = User.model_validate(user_data)\n    print(\"user\", user)\n    session.add(user)\n    session.commit()\n    session.refresh(user)\n\n    return {\"status\": 200, \"data\": user}\n\n\n@user_router.post(\"/user/login\")\ndef user_login(user_login: UserLogin, session=Depends(get_session)) -&gt; TypedDict('Response', {\"access_token\": str,\n                                                                                              \"token_type\": str}):\n    print(\"user_login\", user_login)\n    user_data = user_login.model_dump(exclude_unset=True)\n    found_user = session.exec(select(User).where(User.username == user_data.get('username'))).first()\n    if not found_user:\n        raise UserNotFoundException\n    verified = auth_handler.verify(user_data.get('password'), found_user.password)\n    if not verified:\n        raise InvalidPasswordException\n\n    token = auth_handler.encode_token(found_user.id)\n\n    print(\"token\", token)\n    return {\"access_token\": token, \"token_type\": \"bearer\"}\n\n\n@user_router.patch(\"/user/me/pwd\")\ndef user_change_password(user_pwd: UserPwd, session=Depends(get_session),\n                         current=Depends(auth_handler.current_user)) -&gt; TypedDict('Response', {\"status\": int,\n                                                                                               \"message\": str}):\n    found_user = session.get(User, current.id)\n    if not found_user:\n        raise UserNotFoundException\n    verified = auth_handler.verify(user_pwd.old_password, found_user.password)\n    if not verified:\n        raise HTTPException(status_code=400, detail=\"Invalid old password\")\n    hashed_pwd = auth_handler.get_hash(user_pwd.new_password)\n    found_user.password = hashed_pwd\n    session.add(found_user)\n    session.commit()\n    session.refresh(found_user)\n    return {\"status\": 200, \"message\": \"password changed successfully\"}\n\n\n@user_router.patch(\"/user/update/{user_id}\")\ndef user_update(user_id: int, user: UserDefault,\n                session=Depends(get_session),\n                current=Depends(auth_handler.current_user)) -&gt; UserDefault:\n    db_user = session.get(User, user_id)\n    if not db_user:\n        raise UserNotFoundException\n    if not (user_id == current.id or current.is_admin):\n        raise ForbiddenException\n    user_data = user.model_dump(exclude_unset=True)\n    for key, value in user_data.items():\n        setattr(db_user, key, value)\n    session.add(db_user)\n    session.commit()\n    session.refresh(db_user)\n    user_model = db_user.model_dump(exclude={'password'})\n    return UserDefault.model_validate(user_model)\n\n\n@user_router.delete(\"/user/delete/{user_id}\")\ndef user_delete(user_id: int,\n                session=Depends(get_session),\n                current=Depends(auth_handler.current_user)) -&gt; TypedDict('Response', {\"status\": int,\n                                                                                      \"message\": str}):\n    user = session.get(User, user_id)\n    if not user:\n        raise UserNotFoundException\n    if not (user_id == current.id or current.is_admin):\n        raise ForbiddenException\n    session.delete(user)\n    session.commit()\n    return {\"status\": 201, \"message\": f\"deleted user with id {user_id}\"}\n</code></pre> user_trip_link_endpoints.py<pre><code>from typing import Sequence\n\nfrom fastapi import APIRouter, Depends, HTTPException\nfrom sqlmodel import Session, select\nfrom typing_extensions import List, TypedDict\n\nfrom auth import AuthHandler\nfrom connection import get_session\nfrom exceptions.forbbiden_exception import ForbiddenException\nfrom models.user_trip_link_models import UserTripLink, UserTripLinkDefault\n\nuser_trip_link_router = APIRouter(tags=['UserTripLinks'])\nauth_handler = AuthHandler()\n\n\n@user_trip_link_router.get(\"/usertrip/all\")\ndef link_list(session: Session = Depends(get_session)) -&gt; Sequence[UserTripLink]:\n    return session.exec(select(UserTripLink)).all()\n\n\n@user_trip_link_router.get(\"/usertrip/{user_id}in{trip_id}\")\ndef link_one(user_id: int, trip_id: int, session=Depends(get_session)) -&gt; UserTripLink:\n    link = session.exec(\n        select(UserTripLink).where(UserTripLink.user_id == user_id, UserTripLink.trip_id == trip_id)).first()\n    if not link:\n        raise HTTPException(status_code=404, detail=\"This user is not in this trip\")\n    return link\n\n\n@user_trip_link_router.post(\"/usertrip/bind\")\ndef link_create(link: UserTripLinkDefault, session=Depends(get_session),\n                current=Depends(auth_handler.current_user)) -&gt; TypedDict('Response', {\"status\": int,\n                                                                                      \"data\": UserTripLink}):\n    if not (link.user_id == current.id or current.is_admin):\n        raise ForbiddenException\n\n    link = UserTripLink.model_validate(link)\n    session.add(link)\n    session.commit()\n    session.refresh(link)\n    return {\"status\": 200, \"data\": link}\n\n@user_trip_link_router.delete(\"/UserTripLink/delete/{user_id}in{trip_id}\")\ndef link_delete(user_id: int, trip_id: int, session=Depends(get_session),\n                current=Depends(auth_handler.current_user)):\n    if not (user_id == current.id or current.is_admin):\n        raise ForbiddenException\n\n    link = session.exec(select(UserTripLink).where(UserTripLink.user_id == user_id and UserTripLink.trip_id == trip_id)).first()\n    if not link:\n        raise HTTPException(status_code=404, detail=\"This user is not in this trip\")\n    session.delete(link)\n    session.commit()\n\n    return {\"status\": 201, \"message\": f\"deleted user {user_id} from trip {trip_id}\"}\n</code></pre>"},{"location":"lab-1/models/","title":"Models","text":""},{"location":"lab-1/models/#_1","title":"\u041c\u043e\u0434\u0435\u043b\u0438","text":"location_models.pytransport_models.pytrip_models.pyuser_models.pyuser_trip_link_models.py location_models.py<pre><code>from typing import List\n\nfrom sqlmodel import SQLModel, Field, Relationship\nfrom typing_extensions import Optional\n\nfrom models.trip_models import Trip\n\n\nclass LocationDefault(SQLModel):\n    name: str\n    description: str\n    country: str\n\n\nclass Location(LocationDefault, table=True):\n    id: int = Field(default=None, primary_key=True)\n    trips: Optional[List[\"Trip\"]] = Relationship(back_populates=\"location\")\n</code></pre> transport_models.py<pre><code>from typing import List, Optional\n\nfrom sqlmodel import SQLModel, Field, Relationship\n\nfrom models.trip_models import Trip\n\n\nclass TransportDefault(SQLModel):\n    name: str\n    avalible_seats: int\n    price: int\n\nclass Transport(TransportDefault, table=True):\n    id: int = Field(default=None, primary_key=True)\n    trips: Optional[List[\"Trip\"]] = Relationship(back_populates=\"transport\")\n</code></pre> trip_models.py<pre><code>from enum import Enum\n\nfrom sqlmodel import SQLModel, Field, Relationship\nfrom typing_extensions import Optional, List\n\n\nclass StatusType(Enum):\n    open = \"open\"\n    closed = \"closed\"\n    cancelled = \"cancelled\"\n\n\nclass TripInput(SQLModel):\n    status: str = \"open\"\n    member_limit: Optional[int]\n    location_id: Optional[int]\n    transport_id: Optional[int]\n\n\nclass TripDefault(SQLModel):\n    status: StatusType = StatusType.open\n    member_limit: Optional[int] = Field(default=2, ge=0)\n\n\nclass Trip(TripDefault, table=True):\n    id: int = Field(default=None, primary_key=True)\n\n    members: Optional[List[\"UserTripLink\"]] = Relationship(back_populates=\"trip\",\n                                                           sa_relationship_kwargs={\"cascade\": \"all, delete\"})\n\n    location_id: Optional[int] = Field(default=None, foreign_key=\"location.id\")\n    location: Optional[\"Location\"] = Relationship(back_populates=\"trips\")\n\n    transport_id: Optional[int] = Field(default=None, foreign_key=\"transport.id\")\n    transport: Optional[\"Transport\"] = Relationship(back_populates=\"trips\")\n\n\nclass TripPublic(TripDefault):\n    id: Optional[int]\n    members: Optional[List[\"UserTripLinkUsers\"]] = None\n    transport: Optional[\"Transport\"] = None\n    location: Optional[\"Location\"] = None\n\n\nfrom models.user_trip_link_models import UserTripLink, UserTripLinkUsers\nfrom models.location_models import Location\nfrom models.transport_models import Transport\n</code></pre> user_models.py<pre><code>import datetime\nfrom sqlmodel import SQLModel, Field, Relationship\nfrom typing_extensions import Optional, List\n\n\n\nclass UserDefault(SQLModel):\n    username: str = Field(index=True, unique=True)\n    first_name: str\n    last_name: str\n    age: int = Field(ge=0, le=100)\n\n\nclass User(UserDefault, table=True):\n    id: int = Field(default=None, primary_key=True)\n    password: str = Field(min_length=4, max_length=60)\n    is_admin: bool = False\n    registered: datetime.datetime = datetime.datetime.now()\n    trips: Optional[List[\"UserTripLink\"]] = Relationship(back_populates=\"user\",\n                                                         sa_relationship_kwargs={\"cascade\": \"all, delete\"})\n\n\nclass UserInput(SQLModel):\n    username: str = Field(index=True, unique=True)\n    password: str = Field(min_length=4, max_length=60)\n    first_name: str\n    last_name: str\n    age: int = Field(ge=0, le=130)\n    is_admin: bool = False\n\n\nclass UserLogin(SQLModel):\n    username: str = Field(index=True, unique=True)\n    password: str = Field(min_length=4, max_length=60)\n\n\nclass UserPwd(SQLModel):\n    old_password: str = Field(min_length=4, max_length=60)\n    new_password: str = Field(min_length=4, max_length=60)\n    new_password2: str = Field(min_length=4, max_length=60)\n\n\nfrom models.user_trip_link_models import UserTripLink\n</code></pre> user_trip_link_models.py<pre><code>from enum import Enum\nfrom typing import Optional, List\n\nfrom sqlalchemy import Column, Integer, ForeignKey\nfrom sqlmodel import SQLModel, Field, Relationship, UniqueConstraint\n\n\n\nclass Role(Enum):\n    owner = \"owner\"\n    member = \"member\"\n\n\nclass UserTripLinkDefault(SQLModel):\n    user_id: Optional[int] = Field(sa_column=Column(Integer,\n                                                    ForeignKey(\"user.id\", ondelete='CASCADE'), default=None))\n\n    trip_id: Optional[int] = Field(sa_column=Column(Integer,\n                                                    ForeignKey(\"trip.id\", ondelete='CASCADE'), default=None))\n\n    role: Optional[str] = Field(Role.member)\n\n\nclass UserTripLink(UserTripLinkDefault, table=True):\n    id: int = Field(default=None, primary_key=True)\n\n    user: \"User\" = Relationship(back_populates=\"trips\")\n    trip: \"Trip\" = Relationship(back_populates=\"members\")\n\nclass UserTripLinkUsers(SQLModel):\n    role: Optional[str]\n    user: \"UserDefault\" = None\n\n\nclass UserTripLinkTrips(SQLModel):\n    role: Optional[str]\n    trip: \"TripPublic\" = None\n\n\nfrom models.user_models import User, UserDefault\nfrom models.trip_models import Trip, TripPublic\n</code></pre>"},{"location":"lab-2/","title":"\u0423\u0441\u043b\u043e\u0432\u0438e","text":"<p>\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f:</p> <p>\u0422\u0435\u043a\u0441\u0442 \u0440\u0430\u0431\u043e\u0442\u044b</p>"},{"location":"lab-2/#2","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 2. \u041f\u043e\u0442\u043e\u043a\u0438. \u041f\u0440\u043e\u0446\u0435\u0441\u0441\u044b. \u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0441\u0442\u044c.","text":"<p>\u0426\u0435\u043b\u044c \u0440\u0430\u0431\u043e\u0442\u044b: \u043f\u043e\u043d\u044f\u0442\u044c \u043e\u0442\u043b\u0438\u0447\u0438\u044f \u043f\u043e\u0442\u043e\u043a\u0430\u043c\u0438 \u0438 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430\u043c\u0438 \u0438 \u043f\u043e\u043d\u044f\u0442\u044c, \u0447\u0442\u043e \u0442\u0430\u043a\u043e\u0435 \u0430\u0441\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0441\u0442\u044c \u0432 Python.</p> <p>\u0420\u0430\u0431\u043e\u0442\u0430 \u043e \u043f\u043e\u0442\u043e\u043a\u0430\u0445, \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430\u0445 \u0438 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0441\u0442\u0438 \u043f\u043e\u043c\u043e\u0436\u0435\u0442 \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u0430\u043c \u0440\u0430\u0437\u0432\u0438\u0442\u044c \u043d\u0430\u0432\u044b\u043a\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u044b\u0445 \u0438 \u0431\u044b\u0441\u0442\u0440\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c, \u0447\u0442\u043e \u0432\u0430\u0436\u043d\u043e \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0431\u043e\u043b\u044c\u0448\u0438\u043c\u0438 \u043e\u0431\u044a\u0435\u043c\u0430\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0439. \u042d\u0442\u043e\u0442 \u043e\u043f\u044b\u0442 \u0442\u0430\u043a\u0436\u0435 \u043f\u043e\u0434\u0433\u043e\u0442\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u043e\u0432 \u043a \u0440\u0435\u0430\u043b\u044c\u043d\u044b\u043c \u043f\u0440\u043e\u0435\u043a\u0442\u0430\u043c, \u0433\u0434\u0435 \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u0442\u043e\u0447\u043d\u043e\u0441\u0442\u0438 \u0438 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0441\u0442\u0438 \u0434\u043b\u044f \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u043b\u0438 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0441 \u0432\u043d\u0435\u0448\u043d\u0438\u043c\u0438 \u0441\u0435\u0440\u0432\u0438\u0441\u0430\u043c\u0438. \u0412\u043e\u043f\u0440\u043e\u0441\u044b \u043f\u0440\u043e \u043f\u043e\u0442\u043e\u043a\u0438, \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u044b \u0438 \u0430\u0441\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0441\u0442\u044c \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u044e\u0442\u0441\u044f, \u043a\u0430\u043a \u043c\u0438\u043d\u0438\u043c\u0443\u043c, \u043d\u0430 \u043f\u043e\u043b\u043e\u0432\u0438\u043d\u0435 \u0441\u043e\u0431\u0435\u0441\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u0439 \u043d\u0430 python-\u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430 \u0443\u0440\u043e\u0432\u043d\u044f middle \u0438 \u0412\u044b\u0448\u0435.</p> <p>\u0422\u0435\u043e\u0440\u0435\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u044b (\u043c\u0438\u043d\u0438\u043c\u0443\u043c): - \u041a\u043e\u043d\u0441\u043f\u0435\u043a\u0442 \u043b\u0435\u043a\u0446\u0438\u0438 \u043e \u0442\u043e\u043c, \u043a\u0430\u043a \u0440\u0430\u0431\u043e\u0442\u0430\u044e\u0442 \u043f\u043e\u0442\u043e\u043a\u0438 \u0438 \u043a\u0430\u043a\u0438\u0435 \u0443 \u0435\u0441\u0442\u044c \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0443 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 thearding - \u041a\u043e\u043d\u0441\u043f\u0435\u043a\u0442 \u043e multiprocessing (\u0432 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0435) - \u041a\u043e\u043d\u0441\u043f\u0435\u043a\u0442 \u043e\u0431 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0441\u0442\u0438 (\u0432 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0435) - \u0410\u0441\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0441\u0442\u044c \u0441 AsyncIO - \u0434\u0443\u043c\u0430\u044e, \u044d\u0442\u043e \u043b\u0443\u0447\u0448\u0438\u0439 \u0440\u043e\u043b\u0438\u043a \u0434\u043b\u044f \u0442\u0435\u0445, \u043a\u0442\u043e \u0445\u043e\u0447\u0435\u0442 \u0431\u044b\u0441\u0442\u0440\u043e \u0432\u0441\u0435 \u043f\u043e\u043d\u044f\u0442\u044c - GIL \u0432 Python: \u0437\u0430\u0447\u0435\u043c \u043e\u043d \u043d\u0443\u0436\u0435\u043d \u0438 \u043a\u0430\u043a \u0441 \u044d\u0442\u0438\u043c \u0436\u0438\u0442\u044c (\u0413\u0440\u0438\u0433\u043e\u0440\u0438\u0439 \u041f\u0435\u0442\u0440\u043e\u0432)</p> <p>\u0422\u0435\u043e\u0440\u0435\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u044b (\u0440\u0430\u0441\u0441\u0448\u0438\u0440\u0435\u043d\u043d\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f): - \u041f\u043b\u0435\u0439\u043b\u0438\u0441\u0442 \u0443\u0440\u043e\u043a\u043e\u0432 \u043f\u043e \u0430\u0441\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0441\u0442\u0438 \u0432 Python (\u041e\u043b\u0435\u0433 \u041c\u043e\u043b\u0447\u0430\u043d\u043e\u0432)</p>"},{"location":"lab-2/task1/","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 1","text":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 <p>\u0417\u0430\u0434\u0430\u0447\u0430 1. \u0420\u0430\u0437\u043b\u0438\u0447\u0438\u044f \u043c\u0435\u0436\u0434\u0443 threading, multiprocessing \u0438 async \u0432 Python.</p> <p>\u0417\u0430\u0434\u0430\u0447\u0430: \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0442\u0440\u0438 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u043d\u0430 Python, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0449\u0438\u0435 \u043a\u0430\u0436\u0434\u044b\u0439 \u0438\u0437 \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432: threading, multiprocessing \u0438 async. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0440\u0435\u0448\u0430\u0442\u044c \u0441\u0447\u0438\u0442\u0430\u0442\u044c \u0441\u0443\u043c\u043c\u0443 \u0432\u0441\u0435\u0445 \u0447\u0438\u0441\u0435\u043b \u043e\u0442 1 \u0434\u043e 1000000. \u0420\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u0435 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u043d\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0445 \u0437\u0430\u0434\u0430\u0447 \u0434\u043b\u044f \u0443\u0441\u043a\u043e\u0440\u0435\u043d\u0438\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f.</p> <p>\u041f\u043e\u0434\u0440\u043e\u0431\u043d\u043e\u0441\u0442\u0438 \u0437\u0430\u0434\u0430\u043d\u0438\u044f: 1. \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443 \u043d\u0430 Python \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043f\u043e\u0434\u0445\u043e\u0434\u0430: threading, multiprocessing \u0438 async. 2. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u044e calculate_sum(), \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f. 3. \u0414\u043b\u044f threading \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u043c\u043e\u0434\u0443\u043b\u044c threading, \u0434\u043b\u044f multiprocessing - \u043c\u043e\u0434\u0443\u043b\u044c multiprocessing, \u0430 \u0434\u043b\u044f async - \u043a\u043b\u044e\u0447\u0435\u0432\u044b\u0435 \u0441\u043b\u043e\u0432\u0430 async/await \u0438 \u043c\u043e\u0434\u0443\u043b\u044c asyncio. 4. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0440\u0430\u0437\u0431\u0438\u0442\u044c \u0437\u0430\u0434\u0430\u0447\u0443 \u043d\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u043e\u0434\u0437\u0430\u0434\u0430\u0447 \u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u0438\u0445 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e. 5. \u0417\u0430\u043c\u0435\u0440\u044c\u0442\u0435 \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0438 \u0441\u0440\u0430\u0432\u043d\u0438\u0442\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b.</p> asyncmultiprocessthreadingresults async_worker.py<pre><code>import math\nfrom typing import Callable, Any\n\n\nclass AbstractWorker:\n    _start: int\n\n    _end: int\n\n    _n_tasks: int\n\n    def __init__(self, start: int, end: int, n_tasks: int):\n        self._start = start\n        self._end = end\n        self._n_tasks = n_tasks\n\n    def run(self):\n        raise NotImplementedError()\n\n    def _calc_range(self, start: int, end: int, task_i: int) -&gt; int:\n        summ = 0\n\n        for i in range(start, end):\n            summ += i\n\n        return summ\n\n    def _aggregate_tasks_for_range(self, create_task: Callable[[int, int, int], Any]) -&gt; list:\n        chunk_size = math.ceil((self._end - self._start) / self._n_tasks)\n        tasks = []\n\n        for i in range(self._n_tasks):\n            task_start = self._start + i * chunk_size\n            task_end = min(self._start + (i + 1) * chunk_size, self._end)\n            task = create_task(task_start, task_end, i)\n            tasks.append(task)\n\n            if task_end == self._end:\n                break\n\n        return tasks\n</code></pre> multiprocess_worker.py<pre><code>import multiprocessing\nfrom multiprocessing import Manager, managers\n\nfrom task1.abstract_worker import AbstractWorker\n\n\nclass MultiprocessWorker(AbstractWorker):\n    _manager: Manager\n\n    _results: list[int]\n\n    def __init__(self, start: int, end: int, n_tasks: int):\n        super().__init__(start, end, n_tasks)\n        self._manager = Manager()\n        self._results = self._manager.list([0] * n_tasks)\n\n    def run(self):\n        tasks = self._aggregate_tasks_for_range(self._create_process)\n\n        for task in tasks:\n            task.start()\n\n        for task in tasks:\n            task.join()\n\n        return sum(self._results)\n\n    def _create_process(self, start: int, end: int, task_i: int):\n        return multiprocessing.Process(\n            target=self._calc_range_and_put_in_given_results,\n            args=(self._results, start, end, task_i)\n        )\n\n    @staticmethod\n    def _calc_range_and_put_in_given_results(results: list[int], start: int, end: int, task_i: int):\n        summ = 0\n\n        for i in range(start, end):\n            summ += i\n\n        results[task_i] = summ\n</code></pre> threading_worker.py<pre><code>import threading\n\nfrom task1.abstract_worker import AbstractWorker\n\n\nclass ThreadingWorker(AbstractWorker):\n    _results: list[int]\n\n    def __init__(self, start: int, end: int, n_tasks: int):\n        super().__init__(start, end, n_tasks)\n        self._results = [0] * n_tasks\n\n    def run(self) -&gt; int:\n        tasks = self._aggregate_tasks_for_range(self._create_thread)\n\n        for task in tasks:\n            task.start()\n\n        for task in tasks:\n            task.join()\n\n        return sum(self._results)\n\n    def _create_thread(self, start: int, end: int, index: int) -&gt; threading.Thread:\n        return threading.Thread(target=self._calc_range_and_put_in_results, args=(start, end, index))\n\n    def _calc_range_and_put_in_results(self, start: int, end: int, task_i: int) -&gt; int:\n        summ = 0\n\n        for i in range(start, end):\n            summ += i\n\n        self._results[task_i] = summ\n</code></pre> <p>\u0417\u0430\u0434\u0430\u0447\u0430 1. \u0420\u0430\u0437\u043b\u0438\u0447\u0438\u044f \u043c\u0435\u0436\u0434\u0443 threading, multiprocessing \u0438 async \u0432 Python.</p> Worker Time (seconds) Result AsyncWorker 18.106175422668457 79999999800000000 ThreadingWorker 18.884188413619995 79999999800000000 MultiprocessWorker 8.224344253540039 79999999800000000"},{"location":"lab-2/task2/","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2","text":"<p>\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f:</p> <p>\u0422\u0435\u043a\u0441\u0442 \u0440\u0430\u0431\u043e\u0442\u044b</p> \u0417\u0430\u0434\u0430\u043d\u0438\u0435 <p>\u0417\u0430\u0434\u0430\u0447\u0430 2. \u041f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u0430\u0440\u0441\u0438\u043d\u0433 \u0432\u0435\u0431-\u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u0441 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435\u043c \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445.</p> <p>\u0417\u0430\u0434\u0430\u0447\u0430: \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443 \u043d\u0430 Python \u0434\u043b\u044f \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0432\u0435\u0431-\u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u0441 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432 threading, multiprocessing \u0438 async. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u043f\u0430\u0440\u0441\u0438\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u0441 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0432\u0435\u0431-\u0441\u0430\u0439\u0442\u043e\u0432, \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c \u0438\u0445 \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445.</p> <p>\u041f\u043e\u0434\u0440\u043e\u0431\u043d\u043e\u0441\u0442\u0438 \u0437\u0430\u0434\u0430\u043d\u0438\u044f: 1. \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0442\u0440\u0438 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u043d\u0430 Python, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0449\u0438\u0435 \u043a\u0430\u0436\u0434\u044b\u0439 \u0438\u0437 \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432: threading, multiprocessing \u0438 async. 2. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u044e parse_and_save(url), \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0431\u0443\u0434\u0435\u0442 \u0437\u0430\u0433\u0440\u0443\u0436\u0430\u0442\u044c HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 \u043f\u043e \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u043c\u0443 URL, \u043f\u0430\u0440\u0441\u0438\u0442\u044c \u0435\u0435, \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043d\u0430 \u044d\u043a\u0440\u0430\u043d. 3. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u043d\u043e\u043c\u0435\u0440 1 \u0434\u043b\u044f \u0437\u0430\u043f\u043e\u043b\u0435\u043d\u043d\u0438\u044f \u0435\u0435 \u0434\u0430\u043d\u043d\u044b\u043c\u0438. \u0415\u0441\u043b\u0438 \u0412\u044b \u043d\u0435 \u043f\u043e\u043d\u0438\u043c\u0430\u0435\u0442\u0435, \u043a\u0430\u043a\u0438\u0435 \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u0438 \u043e\u0442\u043a\u0443\u0434\u0430 \u0412\u044b \u043c\u043e\u0433\u043b\u0438 \u0431\u044b \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430, \u043d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u0435\u043f\u043e\u0434\u0430\u0432\u0430\u0442\u0435\u043b\u044e \u0432 \u043e\u0431\u0449\u0435\u043c \u0447\u0430\u0442\u0435 \u043f\u043e\u0442\u043e\u043a\u0430. 4. \u0414\u043b\u044f threading \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u043c\u043e\u0434\u0443\u043b\u044c threading, \u0434\u043b\u044f multiprocessing - \u043c\u043e\u0434\u0443\u043b\u044c multiprocessing, \u0430 \u0434\u043b\u044f async - \u043a\u043b\u044e\u0447\u0435\u0432\u044b\u0435 \u0441\u043b\u043e\u0432\u0430 async/await \u0438 \u043c\u043e\u0434\u0443\u043b\u044c aiohttp \u0434\u043b\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0445 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432. 5. \u0421\u043e\u0437\u0434\u0430\u0439\u0442\u0435 \u0441\u043f\u0438\u0441\u043e\u043a \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 URL-\u0430\u0434\u0440\u0435\u0441\u043e\u0432 \u0432\u0435\u0431-\u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u0434\u043b\u044f \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u0438 \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u0435 \u0435\u0433\u043e \u043d\u0430 \u0440\u0430\u0432\u043d\u044b\u0435 \u0447\u0430\u0441\u0442\u0438 \u0434\u043b\u044f \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430. 6. \u0417\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u0435 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u0430\u0440\u0441\u0438\u043d\u0433 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445. 7. \u0417\u0430\u043c\u0435\u0440\u044c\u0442\u0435 \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0438 \u0441\u0440\u0430\u0432\u043d\u0438\u0442\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b.</p> <p>\u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f: - \u0421\u0434\u0435\u043b\u0430\u0439\u0442\u0435 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044e, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0443\u044e \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043a\u0430\u0436\u0434\u043e\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0435 \u043f\u043e\u0434\u0445\u043e\u0434\u044b \u0438 \u0438\u0445 \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0438. - \u0412\u043a\u043b\u044e\u0447\u0438\u0442\u0435 \u0432 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044e \u0442\u0430\u0431\u043b\u0438\u0446\u044b, \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u044e\u0449\u0438\u0435 \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b. - \u041f\u0440\u043e\u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0440\u0430\u0437\u043d\u044b\u0445 \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432.</p> asyncmultiprocessthreadingresults async_worker.py<pre><code>import asyncio\n\nimport aiohttp\nimport httpx\n\nfrom task2.db import AsyncSession, Article\nfrom task2.abstract_worker import AbstractWorker\n\n\nclass AsyncWorker(AbstractWorker):\n    def run(self) -&gt; None:\n        asyncio.run(self._run())\n\n    async def _run(self) -&gt; None:\n        tasks = self._aggregate_tasks_for_range(self._async_process_urls)\n        await asyncio.gather(*tasks)\n\n    @staticmethod\n    async def _async_process_urls(urls: list[str]) -&gt; None:\n        tasks = [AsyncWorker._async_process_single_url(url) for url in urls]\n        await asyncio.gather(*tasks)\n\n    @staticmethod\n    async def _async_process_single_url(url: str) -&gt; None:\n        html_content = await AsyncWorker._async_load_html_content_from_url(url)\n        title = AbstractWorker._get_data_from_text_content(html_content)\n        await AsyncWorker._async_save_to_db(title)\n\n    @staticmethod\n    async def _async_save_to_db(title) -&gt; None:\n        async with AsyncSession() as session:\n            async with session.begin():\n                article = Article(title=title)\n                session.add(article)\n                print(f'\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0430 \u0441\u0442\u0430\u0442\u044c\u044f: {title}')\n                await session.commit()\n\n    @staticmethod\n    async def _async_load_html_content_from_url(url: str) -&gt; str:\n        async with aiohttp.ClientSession() as session:\n            async with session.get(url) as response:\n                return await response.text()\n</code></pre> multiprocess_worker.py<pre><code>import multiprocessing\nfrom multiprocessing import Manager\n\nfrom task2.abstract_worker import AbstractWorker\n\n\nclass MultiprocessWorker(AbstractWorker):\n    _manager: Manager\n\n    def __init__(self, n_tasks: int, urls: list[str]):\n        super().__init__(n_tasks, urls)\n        self._manager = Manager()\n\n    def run(self):\n        tasks = self._aggregate_tasks_for_range(self._create_process)\n\n        for task in tasks:\n            task.start()\n\n        for task in tasks:\n            task.join()\n\n    def _create_process(self, urls: list[str]) -&gt; multiprocessing.Process:\n        return multiprocessing.Process(target=self._sync_process_urls, args=(urls,))\n</code></pre> threading_worker.py<pre><code>import threading\n\nfrom task2.abstract_worker import AbstractWorker\n\n\nclass ThreadingWorker(AbstractWorker):\n    def run(self):\n        tasks = self._aggregate_tasks_for_range(self._create_thread)\n\n        for task in tasks:\n            task.start()\n\n        for task in tasks:\n            task.join()\n\n    def _create_thread(self, urls: list[str]) -&gt; threading.Thread:\n        return threading.Thread(target=self._sync_process_urls, args=(urls,))\n</code></pre> <p>\u0417\u0430\u0434\u0430\u0447\u0430 1. \u0420\u0430\u0437\u043b\u0438\u0447\u0438\u044f \u043c\u0435\u0436\u0434\u0443 threading, multiprocessing \u0438 async \u0432 Python.</p> Worker Time (seconds) AsyncWorker 1.4784667491912842 MultiprocessWorker 7.75731086730957 ThreadingWorker 7.163795232772827"},{"location":"lab-3/","title":"\u0423\u0441\u043b\u043e\u0432\u0438e","text":"<p>\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f:</p> <p>\u0422\u0435\u043a\u0441\u0442 \u0440\u0430\u0431\u043e\u0442\u044b</p>"},{"location":"lab-3/#3-fastapi-docker","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 3. \u0423\u043f\u0430\u043a\u043e\u0432\u043a\u0430 FastAPI \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0432 Docker, \u0420\u0430\u0431\u043e\u0442\u0430 \u0441 \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a\u0430\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u041e\u0447\u0435\u0440\u0435\u0434\u0438","text":"<p>\u0426\u0435\u043b\u044c \u0440\u0430\u0431\u043e\u0442\u044b:  \u041d\u0430\u0443\u0447\u0438\u0442\u044c\u0441\u044f \u0443\u043f\u0430\u043a\u043e\u0432\u044b\u0432\u0430\u0442\u044c FastAPI \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0432 Docker, \u0438\u043d\u0442\u0435\u0433\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043f\u0430\u0440\u0441\u0435\u0440 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 \u0431\u0430\u0437\u043e\u0439 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u0432\u044b\u0437\u044b\u0432\u0430\u0442\u044c \u043f\u0430\u0440\u0441\u0435\u0440 \u0447\u0435\u0440\u0435\u0437 API \u0438 \u043e\u0447\u0435\u0440\u0435\u0434\u044c.</p> <p>\u0417\u0430\u0434\u0430\u0447\u0438 1 \u0438 2 - \u0437\u0430\u0434\u0430\u0447\u0438 \u043d\u0430 \u043c\u0438\u043d\u0438\u043c\u0443\u043c \u0434\u043b\u044f \u0441\u0434\u0430\u0447\u0438 - 70% \u0431\u0430\u043b\u043b\u043e\u0432. \u0417\u0430\u0434\u0430\u0447\u0438 1, 2 \u0438 3 - 100% \u0431\u0430\u043b\u043b\u043e\u0432.</p>"},{"location":"lab-3/task1/","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 1","text":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 <p>\u0423\u043f\u0430\u043a\u043e\u0432\u043a\u0430 FastAPI \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f, \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 Docker</p> Dockerfile \u0434\u043b\u044f fastApi \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0438\u0437 \u043b\u0430\u0431 1Dockerfile \u0434\u043b\u044f \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u0438\u0437 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 2docker-compose \u0434\u043b\u044f \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 lab-3/app/Dockerfile<pre><code>FROM python:3.11\n\nWORKDIR /app\n\nCOPY requirements.txt .\n\nRUN pip install --root-user-action=ignore -r /app/requirements.txt\n\nCOPY . .\n\nENTRYPOINT [ \"uvicorn\", \"main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"8080\"]\n</code></pre> lab-3/parser/pars_app/Dockerfile<pre><code>FROM python:3.11\n\nWORKDIR /web_parser\n\nCOPY requirements.txt .\n\nRUN pip install --root-user-action=ignore -r /web_parser/requirements.txt\n\nCOPY . .\n\nCMD [ \"uvicorn\", \"main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"8083\"]\n</code></pre> lab-3/app/docker-compose.yaml<pre><code>version: '3.8'\n\nservices:\n  db:\n    image: postgres:16.2\n    restart: always\n    environment:\n      POSTGRES_PASSWORD: 12345\n      POSTGRES_USER: postgres\n      POSTGRES_DB: lab1\n    ports:\n      - \"5432:5432\"\n    volumes:\n      - postgres-data:/var/lib/postgresql/data\n\nvolumes:\n  postgres-data:\n</code></pre>"},{"location":"lab-3/task2/","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2","text":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 <p>\u0412\u044b\u0437\u043e\u0432 \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u0438\u0437 FastAPI</p> <p>\u042d\u043d\u0434\u043f\u043e\u0438\u043d\u0442 \u0432 FastAPI \u0434\u043b\u044f \u0432\u044b\u0437\u043e\u0432\u0430 \u043f\u0430\u0440\u0441\u0435\u0440\u0430: \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0432 FastAPI \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0435\u043d\u0434\u043f\u043e\u0438\u043d\u0442, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0441 URL \u0434\u043b\u044f \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430, \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441 \u043f\u0430\u0440\u0441\u0435\u0440\u0443 (\u0437\u0430\u043f\u0443\u0449\u0435\u043d\u043d\u043e\u043c\u0443 \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u043c \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u0435) \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0442\u044c \u043e\u0442\u0432\u0435\u0442 \u0441 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u043c \u043a\u043b\u0438\u0435\u043d\u0442\u0443. \u0417\u0430\u0447\u0435\u043c: \u042d\u0442\u043e \u043f\u043e\u0437\u0432\u043e\u043b\u0438\u0442 \u0438\u043d\u0442\u0435\u0433\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u0432 \u0432\u0430\u0448\u0435 \u0432\u0435\u0431-\u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435, \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u044f \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c \u043f\u0430\u0440\u0441\u0438\u043d\u0433 \u0447\u0435\u0440\u0435\u0437 API. \u041f\u043e\u043b\u0435\u0437\u043d\u044b\u0435 \u0441\u0441\u044b\u043b\u043a\u0438: \u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f FastAPI</p> \u043e\u0431\u0449\u0438\u0439 docker-composepars_apprequest_app\u0434\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0430\u0446\u0438\u044f lab-3/docker-compose.yaml<pre><code>version: '3.11'\nservices:\n  app:\n    build:\n      context: ./app\n      dockerfile: Dockerfile\n    env_file:\n      - ./app/.env\n    ports:\n      - \"8080:8080\"\n    depends_on:\n      - db\n\n  parse_app:\n    build:\n      context: ./parser/pars_app\n      dockerfile: Dockerfile\n    ports:\n      - \"8083:8083\"\n    depends_on:\n      - parser_db\n\n  request_app:\n    build:\n      context: ./parser/request_app\n      dockerfile: Dockerfile\n    ports:\n      - \"8084:8084\"\n    depends_on:\n      - parser_db\n      - parse_app\n\n  db:\n    image: postgres:16.2\n    container_name: postgres_db\n    environment:\n      POSTGRES_PASSWORD: 12345\n      POSTGRES_USER: postgres\n      POSTGRES_DB: lab1\n    ports:\n      - \"5432:5432\"\n\n  parser_db:\n    image: postgres:16.2\n    container_name: parser_postgres_db\n    environment:\n      POSTGRES_PASSWORD: 12345\n      POSTGRES_USER: postgres\n      POSTGRES_DB: lab2\n      PGPORT: 5433\n    ports:\n      - \"5433:5433\"\n</code></pre> lab-3/parser/pars_app/main.py<pre><code>import os\nfrom typing import Sequence\n\nimport httpx\nfrom bs4 import BeautifulSoup\nfrom dotenv import load_dotenv\nfrom fastapi import FastAPI\nfrom sqlmodel import SQLModel, create_engine, Field, Session, select\n\n\napp = FastAPI()\n\nload_dotenv()\ndb_url = os.getenv(\"DB_LINK\")\nprint(\"db url\", db_url)\nengine = create_engine(db_url)\n\nclass ParseUrl(SQLModel):\n    url: str\n\nclass Article(SQLModel, table=True):\n    id: int = Field(default=None, primary_key=True)\n    title: str = Field()\n\n\nSQLModel.metadata.create_all(engine)\n\n\n@app.post(\"/parse\")\ndef parse(request: ParseUrl) -&gt; Article:\n    html = httpx.get(request.url)\n    soup = BeautifulSoup(html, 'html.parser')\n    title = soup.title.string.replace(' / \u0425\u0430\u0431\u0440', '')\n    session = Session(engine)\n    record = Article(title=title)\n    session.add(record)\n    session.commit()\n    session.refresh(record)\n    return record\n\n@app.get(\"/get_all\")\ndef get_all() -&gt; Sequence[Article]:\n    session = Session(engine)\n    aritcles = session.exec(select(Article)).all()\n    return aritcles\n</code></pre> lab-3/parser/request_app/main.py<pre><code>from fastapi import FastAPI\nimport requests\nfrom sqlmodel import SQLModel, Field\nfrom typing_extensions import List\n\napp = FastAPI()\n\n\nclass ParseRequest(SQLModel):\n    url: str\n\nclass Article(SQLModel):\n    id: int = Field(default=None, primary_key=True)\n    title: str = Field()\n\n@app.post(\"/parse_request\")\ndef parse(url: str) -&gt; Article:\n    parser_url = \"http://parse_app:8083/parse\"\n    response = requests.post(parser_url, json={'url': url})\n    print(\"response\",response)\n    return response.json()\n\n@app.get(\"/get_all_request\")\ndef parse() -&gt; List[Article]:\n    parser_url = \"http://parse_app:8083/get_all\"\n    response = requests.get(parser_url)\n    print(\"response\",response)\n    return response.json()\n</code></pre> <p> </p>"}]}